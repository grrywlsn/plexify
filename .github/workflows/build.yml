name: Build and Release

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  BINARY_NAME: plexify

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run vet
        run: go vet ./...

      - name: Run fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

  build:
    name: Build
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            artifact_name: plexify-linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            artifact_name: plexify-linux-arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            artifact_name: plexify-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            artifact_name: plexify-darwin-arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
            artifact_name: plexify-windows-amd64.exe
          - os: windows-latest
            goos: windows
            goarch: arm64
            artifact_name: plexify-windows-arm64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get version
        id: version
        run: |
          VERSION=$(git describe --tags --always --dirty)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build \
            -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \
            -o ${{ env.BINARY_NAME }} \
            main.go

      - name: Create checksum
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            certutil -hashfile ${{ env.BINARY_NAME }} SHA256 > ${{ env.BINARY_NAME }}.sha256
          else
            sha256sum ${{ env.BINARY_NAME }} > ${{ env.BINARY_NAME }}.sha256
          fi

      - name: Rename binary
        run: |
          mv ${{ env.BINARY_NAME }} ${{ matrix.artifact_name }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}
            ${{ matrix.artifact_name }}.sha256
          retention-days: 30 