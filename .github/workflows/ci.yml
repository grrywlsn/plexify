name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'
  BINARY_NAME: plexify

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.version.outputs.version }}
      v_patch: ${{ steps.semvers.outputs.v_patch }}
      v_minor: ${{ steps.semvers.outputs.v_minor }}
      v_major: ${{ steps.semvers.outputs.v_major }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get Previous tag
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.0.0
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Get next version
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION=$(git describe --tags --always --dirty)
          else
            # Get version from PR labels
            if [[ "${{ contains(github.event.pull_request.labels.*.name, 'major') }}" == "true" ]]; then
              VERSION="${{ steps.semvers.outputs.v_major }}"
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'minor') }}" == "true" ]]; then
              VERSION="${{ steps.semvers.outputs.v_minor }}"
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'patch') }}" == "true" ]]; then
              VERSION="${{ steps.semvers.outputs.v_patch }}"
            else
              VERSION=$(git describe --tags --always --dirty)
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

  build-and-release:
    name: Build and Release
    needs: [get-version]
    runs-on: ${{ matrix.os }}
    if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            artifact_name: plexify-linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            artifact_name: plexify-linux-arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            artifact_name: plexify-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            artifact_name: plexify-darwin-arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
            artifact_name: plexify-windows-amd64.exe
          - os: windows-latest
            goos: windows
            goarch: arm64
            artifact_name: plexify-windows-arm64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Verify build environment
        shell: bash
        run: |
          echo "OS: ${{ runner.os }}"
          echo "GOOS: ${{ matrix.goos }}"
          echo "GOARCH: ${{ matrix.goarch }}"
          echo "Go version: $(go version)"
          echo "Working directory: $(pwd)"

      - name: Build binary
        shell: bash
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
          echo "Version: ${{ needs.get-version.outputs.version }}"
          echo "Binary name: ${{ env.BINARY_NAME }}"
          
          go build \
            -ldflags="-s -w -X main.version=${{ needs.get-version.outputs.version }}" \
            -o ${{ env.BINARY_NAME }} \
            main.go
          
          echo "Build completed. Checking binary:"
          ls -la ${{ env.BINARY_NAME }} || echo "Binary not found"

      - name: Create checksum
        shell: bash
        run: |
          echo "Creating checksum for ${{ env.BINARY_NAME }}"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            certutil -hashfile ${{ env.BINARY_NAME }} SHA256 > ${{ env.BINARY_NAME }}.sha256
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            shasum -a 256 ${{ env.BINARY_NAME }} > ${{ env.BINARY_NAME }}.sha256
          else
            sha256sum ${{ env.BINARY_NAME }} > ${{ env.BINARY_NAME }}.sha256
          fi
          echo "Checksum created:"
          cat ${{ env.BINARY_NAME }}.sha256

      - name: Rename binary
        shell: bash
        run: |
          echo "Renaming ${{ env.BINARY_NAME }} to ${{ matrix.artifact_name }}"
          mv ${{ env.BINARY_NAME }} ${{ matrix.artifact_name }}
          echo "Files ready for upload:"
          ls -la ${{ matrix.artifact_name }}*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}
            ${{ matrix.artifact_name }}.sha256
          retention-days: 30

  release:
    name: Create Release
    needs: [build-and-release, get-version]
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && (contains(github.event.pull_request.labels.*.name, 'patch') || contains(github.event.pull_request.labels.*.name, 'minor') || contains(github.event.pull_request.labels.*.name, 'major'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Create dist directory
        run: mkdir -p dist

      - name: Download Linux AMD64 artifacts
        uses: actions/download-artifact@v5
        with:
          name: plexify-linux-amd64
          path: dist/
        continue-on-error: true

      - name: Download Linux ARM64 artifacts
        uses: actions/download-artifact@v5
        with:
          name: plexify-linux-arm64
          path: dist/
        continue-on-error: true

      - name: Download macOS AMD64 artifacts
        uses: actions/download-artifact@v5
        with:
          name: plexify-darwin-amd64
          path: dist/
        continue-on-error: true

      - name: Download macOS ARM64 artifacts
        uses: actions/download-artifact@v5
        with:
          name: plexify-darwin-arm64
          path: dist/
        continue-on-error: true

      - name: Download Windows AMD64 artifacts
        uses: actions/download-artifact@v5
        with:
          name: plexify-windows-amd64.exe
          path: dist/
        continue-on-error: true

      - name: Download Windows ARM64 artifacts
        uses: actions/download-artifact@v5
        with:
          name: plexify-windows-arm64.exe
          path: dist/
        continue-on-error: true

      - name: List artifacts
        run: |
          echo "Contents of dist directory:"
          ls -la dist/ || echo "dist directory is empty"
          
          # Check if we have any artifacts
          if [ ! "$(ls -A dist/ 2>/dev/null)" ]; then
            echo "Error: No artifacts found in dist directory"
            exit 1
          fi
          
          echo "Found artifacts:"
          ls -la dist/

      - name: Generate release notes
        id: release_notes
        run: |
          # Debug: Show git information
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Current branch: $(git branch --show-current)"
          echo "All tags:"
          git tag --list | tail -10 || echo "No tags found"
          
          # Get the previous tag to determine the range for changes
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          echo "Previous tag: $PREVIOUS_TAG"
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag, get all commits since the beginning
            COMMIT_RANGE=""
            echo "No previous tag found, will check all commits"
          else
            COMMIT_RANGE="$PREVIOUS_TAG..HEAD"
            echo "Commit range: $COMMIT_RANGE"
          fi
          
          # Debug: Show recent commits
          echo "Recent commits:"
          git log --oneline -10
          
          # Debug: Show merge commits
          echo "Recent merge commits:"
          git log --merges --oneline -10
          
          # Get merged PRs since the last release
          # Try different patterns for different merge strategies
          if [ -n "$COMMIT_RANGE" ]; then
            # Try standard merge commits first
            MERGED_PRS=$(git log --merges --pretty=format:"%H %s" $COMMIT_RANGE | grep -E "Merge pull request #[0-9]+" || echo "")
            
            # If no merge commits found, try all commits (for squash and merge)
            if [ -z "$MERGED_PRS" ]; then
              echo "No merge commits found, checking all commits for PR references..."
              MERGED_PRS=$(git log --pretty=format:"%H %s" $COMMIT_RANGE | grep -E "(Merge pull request #[0-9]+|\(#[0-9]+\)|#[0-9]+)" || echo "")
            fi
          else
            # Try standard merge commits first
            MERGED_PRS=$(git log --merges --pretty=format:"%H %s" | grep -E "Merge pull request #[0-9]+" || echo "")
            
            # If no merge commits found, try all commits (for squash and merge)
            if [ -z "$MERGED_PRS" ]; then
              echo "No merge commits found, checking all commits for PR references..."
              MERGED_PRS=$(git log --pretty=format:"%H %s" | grep -E "(Merge pull request #[0-9]+|\(#[0-9]+\)|#[0-9]+)" || echo "")
            fi
          fi
          
          echo "Found merged PRs:"
          echo "$MERGED_PRS"
          
          # Determine which version to use based on PR labels
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'major') }}" == "true" ]]; then
            VERSION="${{ needs.get-version.outputs.v_major }}"
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'minor') }}" == "true" ]]; then
            VERSION="${{ needs.get-version.outputs.v_minor }}"
          else
            VERSION="${{ needs.get-version.outputs.v_patch }}"
          fi
          
          # Generate release notes
          RELEASE_NOTES="## Plexify $VERSION"
          
          if [ -n "$MERGED_PRS" ]; then
            RELEASE_NOTES="$RELEASE_NOTES
            
            ### Changes in this release
            
            This release includes the following merged pull requests:"
            
            # Process each merged PR
            while IFS= read -r line; do
              PR_NUMBER=""
              COMMIT_HASH=$(echo "$line" | awk '{print $1}')
              COMMIT_MSG=$(echo "$line" | sed 's/^[^ ]* //')
              
              # Try to extract PR number from different formats
              if [[ $COMMIT_MSG =~ Merge\ pull\ request\ #([0-9]+) ]]; then
                PR_NUMBER="${BASH_REMATCH[1]}"
              elif [[ $COMMIT_MSG =~ \(#([0-9]+)\) ]]; then
                PR_NUMBER="${BASH_REMATCH[1]}"
              elif [[ $COMMIT_MSG =~ \#([0-9]+) ]]; then
                PR_NUMBER="${BASH_REMATCH[1]}"
              fi
              
              if [ -n "$PR_NUMBER" ]; then
                echo "Processing PR #$PR_NUMBER from commit $COMMIT_HASH"
                
                # Get PR details using GitHub API
                PR_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
                
                PR_TITLE=$(echo "$PR_INFO" | jq -r '.title // "Unknown"')
                PR_USER=$(echo "$PR_INFO" | jq -r '.user.login // "Unknown"')
                PR_LABELS=$(echo "$PR_INFO" | jq -r '.labels[].name // empty' | tr '\n' ', ' | sed 's/,$//')
                
                RELEASE_NOTES="$RELEASE_NOTES
                
            **PR #$PR_NUMBER** by @$PR_USER
            - **Title:** $PR_TITLE
            - **Commit:** \`$COMMIT_HASH\`
            - **Labels:** $PR_LABELS"
              else
                echo "Could not extract PR number from: $COMMIT_MSG"
              fi
            done <<< "$MERGED_PRS"
          else
            # If no merged PRs found, try to get info from the current PR
            CURRENT_PR_NUMBER="${{ github.event.pull_request.number }}"
            if [ -n "$CURRENT_PR_NUMBER" ]; then
              echo "No historical PRs found, using current PR #$CURRENT_PR_NUMBER"
              
              # Get current PR details
              PR_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/pulls/$CURRENT_PR_NUMBER")
              
              PR_TITLE=$(echo "$PR_INFO" | jq -r '.title // "Unknown"')
              PR_USER=$(echo "$PR_INFO" | jq -r '.user.login // "Unknown"')
              PR_LABELS=$(echo "$PR_INFO" | jq -r '.labels[].name // empty' | tr '\n' ', ' | sed 's/,$//')
              
              RELEASE_NOTES="$RELEASE_NOTES
            
            ### Changes in this release
            
            This release includes the following changes:
            
            **PR #$CURRENT_PR_NUMBER** by @$PR_USER
            - **Title:** $PR_TITLE
            - **Labels:** $PR_LABELS"
            else
              RELEASE_NOTES="$RELEASE_NOTES
            
            ### Changes in this release
            
            This release includes direct commits and improvements."
            fi
          fi
          
          # Add standard sections
          RELEASE_NOTES="$RELEASE_NOTES
          
          ### Downloads
          
          **Docker:**
          - \`docker pull ghcr.io/${{ github.repository }}:$VERSION\`
          - \`docker pull ghcr.io/${{ github.repository }}:latest\`
          
          **Linux:**
          - [plexify-linux-amd64](https://github.com/${{ github.repository }}/releases/download/$VERSION/plexify-linux-amd64)
          - [plexify-linux-arm64](https://github.com/${{ github.repository }}/releases/download/$VERSION/plexify-linux-arm64)
          
          **macOS:**
          - [plexify-darwin-amd64](https://github.com/${{ github.repository }}/releases/download/$VERSION/plexify-darwin-amd64)
          - [plexify-darwin-arm64](https://github.com/${{ github.repository }}/releases/download/$VERSION/plexify-darwin-arm64)
          
          **Windows:**
          - [plexify-windows-amd64.exe](https://github.com/${{ github.repository }}/releases/download/$VERSION/plexify-windows-amd64.exe)
          - [plexify-windows-arm64.exe](https://github.com/${{ github.repository }}/releases/download/$VERSION/plexify-windows-arm64.exe)
          
          ### Installation
          
          **Docker (Recommended):**
          \`\`\`bash
          # Pull and run the latest version
          docker run --rm ghcr.io/${{ github.repository }}:latest --help
          
          # Or pull a specific version
          docker pull ghcr.io/${{ github.repository }}:$VERSION
          docker run --rm ghcr.io/${{ github.repository }}:$VERSION --help
          \`\`\`
          
          **Binary Installation:**
          Download the appropriate binary for your platform and make it executable:
          
          \`\`\`bash
          # Linux/macOS
          chmod +x plexify-<platform>-<arch>
          
          # Windows
          # No additional steps needed
          \`\`\`
          
          ### Usage
          
          See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for detailed usage instructions."
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get-version.outputs.v_patch }}
          name: Release ${{ needs.get-version.outputs.v_patch }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: |
            dist/plexify-*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: contains(github.event.pull_request.labels.*.name, 'patch')

      - name: Create minor release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get-version.outputs.v_minor }}
          name: Release ${{ needs.get-version.outputs.v_minor }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: |
            dist/plexify-*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: contains(github.event.pull_request.labels.*.name, 'minor')

      - name: Create major release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get-version.outputs.v_major }}
          name: Release ${{ needs.get-version.outputs.v_major }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: |
            dist/plexify-*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: contains(github.event.pull_request.labels.*.name, 'major')

  docker-build-and-push:
    name: Build and Push Docker Image
    needs: [release, get-version]
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && (contains(github.event.pull_request.labels.*.name, 'patch') || contains(github.event.pull_request.labels.*.name, 'minor') || contains(github.event.pull_request.labels.*.name, 'major'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.get-version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max 