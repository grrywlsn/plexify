name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  BINARY_NAME: plexify

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run vet
        run: go vet ./...

      - name: Run fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

  build-and-release:
    name: Build and Release
    needs: test
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            artifact_name: plexify-linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            artifact_name: plexify-linux-arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            artifact_name: plexify-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            artifact_name: plexify-darwin-arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
            artifact_name: plexify-windows-amd64.exe
          - os: windows-latest
            goos: windows
            goarch: arm64
            artifact_name: plexify-windows-arm64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION=$(git describe --tags --always --dirty)
          else
            # Get version from PR labels
            if [[ "${{ contains(github.event.pull_request.labels.*.name, 'major') }}" == "true" ]]; then
              VERSION="${{ steps.semvers.outputs.v_major }}"
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'minor') }}" == "true" ]]; then
              VERSION="${{ steps.semvers.outputs.v_minor }}"
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'patch') }}" == "true" ]]; then
              VERSION="${{ steps.semvers.outputs.v_patch }}"
            else
              VERSION=$(git describe --tags --always --dirty)
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Get Previous tag
        id: previoustag
        if: github.event.pull_request.merged == true
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.0.0
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Get next version
        id: semvers
        if: github.event.pull_request.merged == true
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build \
            -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \
            -o ${{ env.BINARY_NAME }} \
            main.go

      - name: Create checksum
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            certutil -hashfile ${{ env.BINARY_NAME }} SHA256 > ${{ env.BINARY_NAME }}.sha256
          else
            sha256sum ${{ env.BINARY_NAME }} > ${{ env.BINARY_NAME }}.sha256
          fi

      - name: Rename binary
        run: |
          mv ${{ env.BINARY_NAME }} ${{ matrix.artifact_name }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}
            ${{ matrix.artifact_name }}.sha256
          retention-days: 30

  release:
    name: Create Release
    needs: build-and-release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && (contains(github.event.pull_request.labels.*.name, 'patch') || contains(github.event.pull_request.labels.*.name, 'minor') || contains(github.event.pull_request.labels.*.name, 'major'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Previous tag
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.0.0
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Get next version
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist/

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.semvers.outputs.v_patch }}
          name: Release ${{ steps.semvers.outputs.v_patch }}
          body: |
            ## Plexify ${{ steps.semvers.outputs.v_patch }}
            
            ### Downloads
            
            **Linux:**
            - [plexify-linux-amd64](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_patch }}/plexify-linux-amd64)
            - [plexify-linux-arm64](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_patch }}/plexify-linux-arm64)
            
            **macOS:**
            - [plexify-darwin-amd64](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_patch }}/plexify-darwin-amd64)
            - [plexify-darwin-arm64](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_patch }}/plexify-darwin-arm64)
            
            **Windows:**
            - [plexify-windows-amd64.exe](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_patch }}/plexify-windows-amd64.exe)
            - [plexify-windows-arm64.exe](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_patch }}/plexify-windows-arm64.exe)
            
            ### Installation
            
            Download the appropriate binary for your platform and make it executable:
            
            ```bash
            # Linux/macOS
            chmod +x plexify-<platform>-<arch>
            
            # Windows
            # No additional steps needed
            ```
            
            ### Usage
            
            See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for detailed usage instructions.
          files: |
            dist/plexify-*
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: contains(github.event.pull_request.labels.*.name, 'patch')

      - name: Create minor release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.semvers.outputs.v_minor }}
          name: Release ${{ steps.semvers.outputs.v_minor }}
          body: |
            ## Plexify ${{ steps.semvers.outputs.v_minor }}
            
            ### Downloads
            
            **Linux:**
            - [plexify-linux-amd64](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_minor }}/plexify-linux-amd64)
            - [plexify-linux-arm64](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_minor }}/plexify-linux-arm64)
            
            **macOS:**
            - [plexify-darwin-amd64](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_minor }}/plexify-darwin-amd64)
            - [plexify-darwin-arm64](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_minor }}/plexify-darwin-arm64)
            
            **Windows:**
            - [plexify-windows-amd64.exe](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_minor }}/plexify-windows-amd64.exe)
            - [plexify-windows-arm64.exe](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_minor }}/plexify-windows-arm64.exe)
            
            ### Installation
            
            Download the appropriate binary for your platform and make it executable:
            
            ```bash
            # Linux/macOS
            chmod +x plexify-<platform>-<arch>
            
            # Windows
            # No additional steps needed
            ```
            
            ### Usage
            
            See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for detailed usage instructions.
          files: |
            dist/plexify-*
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: contains(github.event.pull_request.labels.*.name, 'minor')

      - name: Create major release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.semvers.outputs.v_major }}
          name: Release ${{ steps.semvers.outputs.v_major }}
          body: |
            ## Plexify ${{ steps.semvers.outputs.v_major }}
            
            ### Downloads
            
            **Linux:**
            - [plexify-linux-amd64](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_major }}/plexify-linux-amd64)
            - [plexify-linux-arm64](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_major }}/plexify-linux-arm64)
            
            **macOS:**
            - [plexify-darwin-amd64](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_major }}/plexify-darwin-amd64)
            - [plexify-darwin-arm64](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_major }}/plexify-darwin-arm64)
            
            **Windows:**
            - [plexify-windows-amd64.exe](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_major }}/plexify-windows-amd64.exe)
            - [plexify-windows-arm64.exe](https://github.com/${{ github.repository }}/releases/download/${{ steps.semvers.outputs.v_major }}/plexify-windows-arm64.exe)
            
            ### Installation
            
            Download the appropriate binary for your platform and make it executable:
            
            ```bash
            # Linux/macOS
            chmod +x plexify-<platform>-<arch>
            
            # Windows
            # No additional steps needed
            ```
            
            ### Usage
            
            See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for detailed usage instructions.
          files: |
            dist/plexify-*
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: contains(github.event.pull_request.labels.*.name, 'major') 