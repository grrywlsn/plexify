name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'
  BINARY_NAME: plexify

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run vet
        run: go vet ./...

      - name: Run fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

  get-version:
    name: Get Version
    needs: test
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.version.outputs.version }}
      v_patch: ${{ steps.semvers.outputs.v_patch }}
      v_minor: ${{ steps.semvers.outputs.v_minor }}
      v_major: ${{ steps.semvers.outputs.v_major }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Previous tag
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.0.0
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Get next version
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION=$(git describe --tags --always --dirty)
          else
            # Get version from PR labels
            if [[ "${{ contains(github.event.pull_request.labels.*.name, 'major') }}" == "true" ]]; then
              VERSION="${{ steps.semvers.outputs.v_major }}"
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'minor') }}" == "true" ]]; then
              VERSION="${{ steps.semvers.outputs.v_minor }}"
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'patch') }}" == "true" ]]; then
              VERSION="${{ steps.semvers.outputs.v_patch }}"
            else
              VERSION=$(git describe --tags --always --dirty)
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

  build-and-release:
    name: Build and Release
    needs: [test, get-version]
    runs-on: ${{ matrix.os }}
    if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            artifact_name: plexify-linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            artifact_name: plexify-linux-arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            artifact_name: plexify-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            artifact_name: plexify-darwin-arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
            artifact_name: plexify-windows-amd64.exe
          - os: windows-latest
            goos: windows
            goarch: arm64
            artifact_name: plexify-windows-arm64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Verify build environment
        shell: bash
        run: |
          echo "OS: ${{ runner.os }}"
          echo "GOOS: ${{ matrix.goos }}"
          echo "GOARCH: ${{ matrix.goarch }}"
          echo "Go version: $(go version)"
          echo "Working directory: $(pwd)"

      - name: Build binary
        shell: bash
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build \
            -ldflags="-s -w -X main.version=${{ needs.get-version.outputs.version }}" \
            -o ${{ env.BINARY_NAME }} \
            main.go

      - name: Create checksum
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            certutil -hashfile ${{ env.BINARY_NAME }} SHA256 > ${{ env.BINARY_NAME }}.sha256
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            shasum -a 256 ${{ env.BINARY_NAME }} > ${{ env.BINARY_NAME }}.sha256
          else
            sha256sum ${{ env.BINARY_NAME }} > ${{ env.BINARY_NAME }}.sha256
          fi

      - name: Rename binary
        shell: bash
        run: |
          mv ${{ env.BINARY_NAME }} ${{ matrix.artifact_name }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}
            ${{ matrix.artifact_name }}.sha256
          retention-days: 30

  release:
    name: Create Release
    needs: [build-and-release, get-version]
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && (contains(github.event.pull_request.labels.*.name, 'patch') || contains(github.event.pull_request.labels.*.name, 'minor') || contains(github.event.pull_request.labels.*.name, 'major'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag to determine the range for changes
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag, get all commits since the beginning
            COMMIT_RANGE=""
          else
            COMMIT_RANGE="$PREVIOUS_TAG..HEAD"
          fi
          
          # Get merged PRs since the last release
          if [ -n "$COMMIT_RANGE" ]; then
            MERGED_PRS=$(git log --merges --pretty=format:"%H %s" $COMMIT_RANGE | grep -E "Merge pull request #[0-9]+" || echo "")
          else
            MERGED_PRS=$(git log --merges --pretty=format:"%H %s" | grep -E "Merge pull request #[0-9]+" || echo "")
          fi
          
          # Determine which version to use based on PR labels
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'major') }}" == "true" ]]; then
            VERSION="${{ needs.get-version.outputs.v_major }}"
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'minor') }}" == "true" ]]; then
            VERSION="${{ needs.get-version.outputs.v_minor }}"
          else
            VERSION="${{ needs.get-version.outputs.v_patch }}"
          fi
          
          # Generate release notes
          RELEASE_NOTES="## Plexify $VERSION"
          
          if [ -n "$MERGED_PRS" ]; then
            RELEASE_NOTES="$RELEASE_NOTES
            
            ### Changes in this release
            
            This release includes the following merged pull requests:"
            
            # Process each merged PR
            while IFS= read -r line; do
              if [[ $line =~ Merge\ pull\ request\ #([0-9]+) ]]; then
                PR_NUMBER="${BASH_REMATCH[1]}"
                COMMIT_HASH=$(echo "$line" | awk '{print $1}')
                
                # Get PR details using GitHub API
                PR_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
                
                PR_TITLE=$(echo "$PR_INFO" | jq -r '.title // "Unknown"')
                PR_USER=$(echo "$PR_INFO" | jq -r '.user.login // "Unknown"')
                PR_LABELS=$(echo "$PR_INFO" | jq -r '.labels[].name // empty' | tr '\n' ', ' | sed 's/,$//')
                
                # Get commit message for more context
                COMMIT_MSG=$(git log --format=%B -n 1 $COMMIT_HASH | head -n 1)
                
                RELEASE_NOTES="$RELEASE_NOTES
                
            **PR #$PR_NUMBER** by @$PR_USER
            - **Title:** $PR_TITLE
            - **Commit:** \`$COMMIT_HASH\`
            - **Labels:** $PR_LABELS"
              fi
            done <<< "$MERGED_PRS"
          else
            RELEASE_NOTES="$RELEASE_NOTES
            
            ### Changes in this release
            
            This release includes direct commits and improvements."
          fi
          
          # Add standard sections
          RELEASE_NOTES="$RELEASE_NOTES
          
          ### Downloads
          
          **Linux:**
          - [plexify-linux-amd64](https://github.com/${{ github.repository }}/releases/download/$VERSION/plexify-linux-amd64)
          - [plexify-linux-arm64](https://github.com/${{ github.repository }}/releases/download/$VERSION/plexify-linux-arm64)
          
          **macOS:**
          - [plexify-darwin-amd64](https://github.com/${{ github.repository }}/releases/download/$VERSION/plexify-darwin-amd64)
          - [plexify-darwin-arm64](https://github.com/${{ github.repository }}/releases/download/$VERSION/plexify-darwin-arm64)
          
          **Windows:**
          - [plexify-windows-amd64.exe](https://github.com/${{ github.repository }}/releases/download/$VERSION/plexify-windows-amd64.exe)
          - [plexify-windows-arm64.exe](https://github.com/${{ github.repository }}/releases/download/$VERSION/plexify-windows-arm64.exe)
          
          ### Installation
          
          Download the appropriate binary for your platform and make it executable:
          
          \`\`\`bash
          # Linux/macOS
          chmod +x plexify-<platform>-<arch>
          
          # Windows
          # No additional steps needed
          \`\`\`
          
          ### Usage
          
          See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for detailed usage instructions."
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.get-version.outputs.v_patch }}
          name: Release ${{ needs.get-version.outputs.v_patch }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: |
            dist/plexify-*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: contains(github.event.pull_request.labels.*.name, 'patch')

      - name: Create minor release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.get-version.outputs.v_minor }}
          name: Release ${{ needs.get-version.outputs.v_minor }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: |
            dist/plexify-*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: contains(github.event.pull_request.labels.*.name, 'minor')

      - name: Create major release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.get-version.outputs.v_major }}
          name: Release ${{ needs.get-version.outputs.v_major }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: |
            dist/plexify-*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: contains(github.event.pull_request.labels.*.name, 'major') 